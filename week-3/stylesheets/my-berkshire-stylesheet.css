body {
  background-color: #fff; 
}

header {
   text-align: center;
   border-bottom: 1px solid #000080;
}

h1 {
  color: #000080;
  font-variant: small-caps;
  margin: 0 0;
}
h2 {
   color: #000080;
}
h3 {
   color: #000080;
}
p {
  color: #000080;
}

a {
 color: #000080;
}

a:visited {
  color: #ff0000;
}
ul {
  display: inline-block;
  border: 0px solid green;
  width: 450px;
}

.description {
  font-size: .5em;
  margin: .2em 0 1em 0;
  
}

.geico-border {
  border-bottom: 1px solid #000080;
  border-top: 1px solid #000080;
  padding: 15px 0;
}

.bottom-border {
  border-bottom: 1px solid #000080;
  padding: 15px 0;
}

/*
What is important to know when linking an external file (like a stylesheet) to an HTML file?
Make sure you get the relative link to the file correct. Initially I thought that remembering the three attributes to give it would be hard, but then I learned that Sublime text will automatically fill those in if you use tab autocomplete, so that was super handy.

What tricks did you use to help you with positioning? How hard was it to get the site as you wanted it?
It took us a good amount of time to figure out which tools would get as close to the real thing as possible. My partner was really helpful in these tasks, he has some experience with CSS in the past so he knew a lot of tricks. For example, I wanted to use <spans> around the B and H of the <header> to make them bigger than the other letters, but he knew about the small caps font, which was exactly what they used. Also shrinking the font for the dates of some of the list items then pulled the next item up, until we realized that we needed to increase the margins on them.

What CSS did you use to modify the element style (like size, color, etc.)
We used font size for the different sections, color for the header vs list items, font varient, which I hadn't seen before, for the different sections (like small caps for the header), and different display settings.

Did you modify the HTML to include classes or ids? If so, which did you choose and why? If you didn't, how would you know which one to add to your HTML?
We used classes and tags, but no IDs. Between classes and tags we were basically able to cover everything, there really isn't any situation where you would want to use an ID which is just good for a single instance instead of a class (except, my partner informed me, sometimes when you're working with JavaScript or JQuery you might actually want to use an ID for something in a single instance, but we're not there yet).

When you compared your site to the actual code base, which do you think had cleaner code that followed best practices and why?
I think that our code was definitely cleaner and more up to standards, since they just use a table and we used current HTML5 tags and simpler CSS classes/stylesheets instead of doing it all inline like they did. That said, their site is tiny so it loads quickly, it has no fancy bells and whistles that might not run on older browsers, and it's totally responsive so no matter what you view it on, it'll look correct. So it's a very very specialized site, and does those things well. 
*/